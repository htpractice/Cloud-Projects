# This snippet is a playbook file that installs Docker on the EC2 instances. The playbook file is named playbook.yml.
---
- hosts: all
  become: true
  vars_files:
    - vars/main.yml
  tasks:
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true
    
    - name: Check if AWS CLI is installed
      command: aws --version
      register: aws_cli_version
      ignore_errors: true

    - name: Remove existing AWS CLI v1
      shell: |
        sudo rm /usr/local/bin/aws
        sudo rm -rf /usr/local/aws-cli
      when: aws_cli_version.stdout is search("aws-cli/1")

    - name: Remove existing AWS CLI v2
      shell: |
        sudo rm /usr/local/bin/aws
        sudo rm -rf /usr/local/aws-cli
      when: aws_cli_version.stdout is search("aws-cli/2")

    - name: Download AWS CLI Bundled Installer
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: "/tmp/awscliv2.zip"

    - name: Unzip AWS CLI Bundled Installer
      unarchive:
        src: "/tmp/awscliv2.zip"
        dest: "/tmp"
        remote_src: yes

    - name: Install AWS CLI
      shell: "/tmp/aws/install"

    - name: Log in to ECR
      shell: |
        aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ ecr_registry }}
    
    - name: Build Docker image
      shell: |
        cd ../docker
        docker build -t jenkins-image .

    - name: Tag Docker image
      shell: |
        docker tag jenkins-image:latest {{ ecr_registry }}/jenkins-image:latest

    - name: Push Docker image to ECR
      shell: |
        docker push {{ ecr_registry }}/jenkins:latest

    - name: Copy private key
      copy:
        src: /home/ubuntu/private_key.pem
        dest: /home/ubuntu/private_key.pem
        mode: '0600'